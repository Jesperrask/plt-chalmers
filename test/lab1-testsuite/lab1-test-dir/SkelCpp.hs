module SkelCpp where

-- Haskell module generated by the BNF converter

import AbsCpp
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transCIdent :: CIdent -> Result
transCIdent x = case x of
  CIdent string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  PDefs defs -> failure x
transDef :: Def -> Result
transDef x = case x of
  DFun type_ cident args fbod -> failure x
  DType typedef -> failure x
  DDcl decl -> failure x
  DUs qconst -> failure x
transArg :: Arg -> Result
transArg x = case x of
  ArgVar argdecl -> failure x
  ArgCons argdecl -> failure x
transArgDecl :: ArgDecl -> Result
transArgDecl x = case x of
  ADeclType type_ -> failure x
  ADeclVar type_ cident -> failure x
  ADeclInit type_ cident exp -> failure x
transFBod :: FBod -> Result
transFBod x = case x of
  FBodBlck stms -> failure x
  FBodNil -> failure x
transStm :: Stm -> Result
transStm x = case x of
  SExp exp -> failure x
  SDecl decl -> failure x
  SRet exp -> failure x
  SWhile exp stm -> failure x
  SDoWhile stm exp -> failure x
  SFor decl exp1 exp2 stm -> failure x
  SIf exp stm -> failure x
  SIfEl exp stm1 stm2 -> failure x
  SBlock stms -> failure x
  STyp typedef -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  DclVar declinit -> failure x
  DclCons declinit -> failure x
transDeclInit :: DeclInit -> Result
transDeclInit x = case x of
  DclNoInit type_ cident -> failure x
  Dcls type_ cident cidents -> failure x
  DclInit type_ cident exp -> failure x
transTypeDef :: TypeDef -> Result
transTypeDef x = case x of
  TDef type_ cident -> failure x
transType :: Type -> Result
transType x = case x of
  TBool -> failure x
  TInt -> failure x
  TChar -> failure x
  TDouble -> failure x
  TVoid -> failure x
  TConst qconst -> failure x
  TRef type_ -> failure x
transExp :: Exp -> Result
transExp x = case x of
  EThr exp -> failure x
  ECond exp1 exp2 exp3 -> failure x
  EAss exp1 exp2 -> failure x
  EPEq exp1 exp2 -> failure x
  EMEq exp1 exp2 -> failure x
  EOr exp1 exp2 -> failure x
  EAnd exp1 exp2 -> failure x
  EEq exp1 exp2 -> failure x
  ENEq exp1 exp2 -> failure x
  ELt exp1 exp2 -> failure x
  EGt exp1 exp2 -> failure x
  ELtEq exp1 exp2 -> failure x
  EGtWq exp1 exp2 -> failure x
  ELShift exp1 exp2 -> failure x
  ERShift exp1 exp2 -> failure x
  EAdd exp1 exp2 -> failure x
  ESub exp1 exp2 -> failure x
  EMul exp1 exp2 -> failure x
  EDiv exp1 exp2 -> failure x
  EMod exp1 exp2 -> failure x
  EIncr exp -> failure x
  EDecr exp -> failure x
  ENot exp -> failure x
  EPtr exp -> failure x
  EPIncr exp -> failure x
  EPDecr exp -> failure x
  EDot exp1 exp2 -> failure x
  EArr exp1 exp2 -> failure x
  EFCall exp exps -> failure x
  EInd exp1 exp2 -> failure x
  EQConst qconst -> failure x
  EInt integer -> failure x
  EChar char -> failure x
  EDoub double -> failure x
  EStr strings -> failure x
transQConst :: QConst -> Result
transQConst x = case x of
  QConstMain qconstels -> failure x
transQConstEl :: QConstEl -> Result
transQConstEl x = case x of
  QConstCIdent cident -> failure x
  QConstTp cident types -> failure x

