-- LAB 1

token CIdent (letter (letter | digit | '_')* ) ;

comment "#";
comment "//" ;
comment "/*" "*/";

--Program
PDefs. Program ::= [Def] ;
terminator Def "" ;

--Definitions
DFun. Def ::= Type CIdent "(" [Arg] ")" FBod ;
DType. Def ::= TypeDef ";" ;  
DDcl. Def ::= Decl ";" ;
DUs. Def ::= "using" QConst ";";
separator Arg "," ;

--Argument list
ArgVar. Arg ::= ArgDecl ;
ArgCons. Arg ::= "const" ArgDecl ;
ADeclType. ArgDecl ::= Type ; 
ADeclVar. ArgDecl ::= Type CIdent ;
ADeclInit. ArgDecl ::= Type CIdent "=" Exp ;

--Function body
FBodBlck. FBod ::= "{" [Stm] "}" ;
FBodNil. FBod ::= ";" ;
terminator Stm "" ;

--Statements
SExp. Stm ::= Exp ";" ;
SDecl. Stm ::= Decl ";" ;
SRet. Stm ::= "return" Exp ";" ;
SWhile. Stm ::= "while" "(" Exp ")" Stm ;
SDoWhile. Stm ::= "do" Stm "while" "(" Exp")" ";";
SFor. Stm ::= "for" "(" Decl ";" Exp ";" Exp ")" Stm ;
SIf. Stm ::= "if" "(" Exp ")" Stm;
SIfEl. Stm ::= "if" "(" Exp ")" Stm "else" Stm ;
SBlock. Stm ::= "{" [Stm] "}" ;
STyp. Stm ::= TypeDef ";" ;

--Declarations and initializations
DclVar. Decl ::= DeclInit ;
DclCons. Decl ::= "const" DeclInit ;
DclNoInit. DeclInit ::= Type CIdent ;
Dcls. DeclInit ::= Type CIdent "," [CIdent] ;
DclInit. DeclInit ::= Type CIdent "=" Exp;
separator nonempty CIdent "," ;

--Type definition
TDef. TypeDef ::= "typedef" Type CIdent;

--Types
TBool. Type ::= "bool" ;
TInt. Type ::= "int" ;
TChar. Type ::= "char" ;
TDouble. Type ::= "double" ;
TVoid. Type ::= "void" ;
TConst. Type ::= QConst ;
TRef. Type ::= Type "&" ;

--Expressions
EThr. Exp ::= "throw" Exp1;
ECond. Exp1 ::= Exp2 "?" Exp1 ":" Exp1 ;
EAss. Exp2 ::= Exp3 "=" Exp2 ;
EPEq. Exp2 ::= Exp3 "+=" Exp2 ;
EMEq. Exp2 ::= Exp3 "-=" Exp2 ;
EOr. Exp3 ::= Exp3 "||" Exp4 ;
EAnd. Exp4 ::= Exp4 "&&" Exp5 ;
EEq. Exp8 ::= Exp9 "==" Exp9 ;
ENEq. Exp8 ::= Exp9 "!=" Exp9 ;
ELt. Exp9 ::= Exp10 "<" Exp10 ;
EGt. Exp9 ::= Exp10 ">" Exp10 ;
ELtEq. Exp9 ::= Exp10 "<=" Exp10 ;
EGtWq. Exp9 ::= Exp10 ">=" Exp10 ;
ELShift. Exp10 ::= Exp10 "<<" Exp11 ;
ERShift. Exp10 ::= Exp10 ">>" Exp11 ;
EAdd. Exp11  ::= Exp11  "+" Exp12 ;
ESub. Exp11  ::= Exp11 "-" Exp12 ;
EMul. Exp12 ::= Exp12 "*" Exp13 ;
EDiv. Exp12 ::= Exp12 "/" Exp13 ;
EMod. Exp12 ::= Exp12 "%" Exp13 ;
EIncr. Exp13 ::= "++" Exp14 ;
EDecr. Exp13 ::= "--" Exp14 ;
ENot. Exp13 ::= "!" Exp13 ;
EPtr. Exp13 ::= "*" Exp13 ;
EPIncr. Exp14 ::= Exp15 "++" ;
EPDecr. Exp14 ::= Exp15 "--" ;
EDot. Exp14 ::= Exp14 "." Exp15 ;
EArr. Exp14 ::= Exp14 "->" Exp15 ;
EFCall. Exp15 ::= Exp16 "(" [Exp] ")" ;
EInd. Exp15 ::= Exp15 "[" Exp "]" ;
EQConst. Exp16 ::= QConst ;
EInt. Exp16 ::= Integer ;
EChar. Exp16 ::= Char ;
EDoub. Exp16 ::= Double ; 
EStr. Exp16 ::= [String] ;
separator nonempty String "" ;
separator Exp "," ; 
coercions Exp 16 ;

--Qualified constants
QConstMain. QConst ::= [QConstEl] ;
QConstCIdent. QConstEl ::= CIdent;
QConstTp. QConstEl ::= CIdent "<" [Type] ">";
separator nonempty QConstEl "::";
separator nonempty Type ",";
