comment "#";
comment "//" ;
comment "/*" "*/";

PDefs. Program ::= [Def] ;
terminator Def "" ;

DFun. Def ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
DFunNoBod. Def ::= Type Id "(" [Arg] ")" ";";
separator Arg "," ;
terminator Stm "" ;
DUs. Def ::= "using" Const ";";
DType. Def ::= TypeDef ";" ;  

ADeclType. Arg ::= Type ; 
ADeclVar. Arg ::= Type Id ;
ADeclInit. Arg ::= Type Id "=" Exp ;
ADeclConst. Arg ::= "const" Arg;

SExp. Stm ::= Exp ";";
SRet. Stm ::= "return" Exp ";";
SDecl. Stm ::= Decl ";";
SWhile. Stm ::= "while" "(" Exp ")" Stm;
SDoWhile. Stm ::= "do" Stm "while" "(" Exp")" ";";
SFor. Stm ::= "for" "(" Decl ";" Exp ";" Exp ")" Stm ;
STyp. Stm ::= TypeDef ";";
SIf. Stm ::= "if" "(" Exp ")" Stm;
SIfEl. Stm ::= "if" "(" Exp ")" Stm "else" Stm ;
SBlock. Stm ::= "{" [Stm] "}" ;

Dcl. Decl ::= Type Id ;
Dcls. Decl ::= Type Id "," [Id] ;
separator nonempty Id "," ;
DclInit. Decl ::= Type Id "=" Exp;
DclCons. Decl ::= "const" Decl;

TDef. TypeDef ::= "typedef" Type Id;

TBool. Type ::= "bool" ;
TInt. Type ::= "int" ;
TChar. Type ::= "char" ;
TDouble. Type ::= "double" ;
TVoid. Type ::= "void" ;
TConst. Type ::= Const ;
TRef. Type ::= Type "&" ;


EThr. Exp ::= "throw" Exp1;
ECond. Exp1 ::= Exp2 "?" Exp ":" Exp1 ;
EAss. Exp2 ::= Exp3 "=" Exp2 ;
EOr. Exp3 ::= Exp3 "||" Exp4 ;
EAnd. Exp4 ::= Exp4 "&&" Exp5 ;
EEq. Exp8 ::= Exp9 "==" Exp9 ;
ENEq. Exp8 ::= Exp9 "!=" Exp9 ;
ELt. Exp9 ::= Exp10 "<" Exp10 ;
EGt. Exp9 ::= Exp10 ">" Exp10 ;
ELtEq. Exp9 ::= Exp10 "<=" Exp10 ;
EGtWq. Exp9 ::= Exp10 ">=" Exp10 ;
ELShift. Exp10 ::= Exp10 "<<" Exp11 ;
ERShift. Exp10 ::= Exp10 ">>" Exp11 ;
EAdd. Exp11  ::= Exp11  "+" Exp12 ;
ESub. Exp11  ::= Exp11 "-" Exp12 ;
EMul. Exp12 ::= Exp12 "*" Exp13 ;
EDiv. Exp12 ::= Exp12 "/" Exp13 ;
EMod. Exp12 ::= Exp12 "%" Exp13 ;
EIncr. Exp13 ::= "++" Exp14 ;
EDecr. Exp13 ::= "--" Exp14 ;
ENot. Exp13 ::= "!" Exp14 ;
EPtr. Exp13 ::= "*" Exp14 ;
EPIncr. Exp14 ::= Exp15 "++" ;
EPDecr. Exp14 ::= Exp15 "--" ;
EDot. Exp14 ::= Exp14 "." Exp15 ;
EArr. Exp14 ::= Exp14 "->" Exp15 ;
EFCall. Exp15 ::= Exp15 "(" [Exp] ")" ;
separator Exp "," ; 
EInd. Exp15 ::= Exp15 "[" Exp "]" ;
EQConst. Exp16 ::= Const ;
EInt. Exp16 ::= Integer ;
EChar. Exp16 ::= Char ;
EDoub. Exp16 ::= Double ; 
EStr. Exp16 ::= [String] ;
separator nonempty String "" ; 
coercions Exp 16 ;

Var. Id ::= Ident;

QConsts. Const ::= [ConstEl];
separator nonempty ConstEl "::";

QConstId. ConstEl ::= Ident;
QConstTp. ConstEl ::= Ident "<" [Type] ">";
separator Type ",";
